from flask import Flask, request, jsonify, session
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import os

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://user:password@localhost/movies_db'
db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'

# User Authentication Model
class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), nullable=False, unique=True)
    password = db.Column(db.String(150), nullable=False)

class Movie(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    genre = db.Column(db.String(50), nullable=False)

class Review(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    movie_id = db.Column(db.Integer, db.ForeignKey('movie.id'), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    review_text = db.Column(db.Text, nullable=False)
    sentiment_score = db.Column(db.Float)

# Sentiment analysis function
sia = SentimentIntensityAnalyzer()

def get_sentiment(review):
    score = sia.polarity_scores(review)
    return score['compound']

# Collaborative filtering function (simplified)
def collaborative_filtering(user_id):
    user_reviews = Review.query.filter_by(user_id=user_id).all()
    # Placeholder logic for collaborative filtering
    # You can implement a real collaborative filtering system using a library like surprise
    recommended_movies = Movie.query.limit(5).all()
    return recommended_movies

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    hashed_password = bcrypt.generate_password_hash(data['password']).decode('utf-8')
    new_user = User(username=data['username'], password=hashed_password)
    db.session.add(new_user)
    db.session.commit()
    return jsonify({'message': 'User created successfully'})

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    user = User.query.filter_by(username=data['username']).first()
    if user and bcrypt.check_password_hash(user.password, data['password']):
        login_user(user)
        return jsonify({'message': 'Login successful'})
    return jsonify({'message': 'Invalid credentials'})

@app.route('/logout', methods=['POST'])
@login_required
def logout():
    logout_user()
    return jsonify({'message': 'Logged out successfully'})

@app.route('/submit_review', methods=['POST'])
@login_required
def submit_review():
    data = request.get_json()
    movie_id = data['movie_id']
    review_text = data['review_text']
    
    sentiment_score = get_sentiment(review_text)
    
    new_review = Review(movie_id=movie_id, user_id=current_user.id, review_text=review_text, sentiment_score=sentiment_score)
    db.session.add(new_review)
    db.session.commit()
    
    return jsonify({"message": "Review submitted", "sentiment": sentiment_score})

@app.route('/recommend', methods=['GET'])
@login_required
def recommend():
    recommended_movies = collaborative_filtering(current_user.id)
    return jsonify({"recommended_movies": [{"title": movie.title, "genre": movie.genre} for movie in recommended_movies]})

if __name__ == '__main__':
    app.run(debug=True)
